import { catchAsyncErrors } from "./catchAsyncErrors.js";
import ErrorHandler from "./errorMiddleware.js";
import { User } from "../models/userSchema.js";
import jwt from "jsonwebtoken"

export const isAdminAuthenticated = catchAsyncErrors(async (req, res, next) => {
  //Authentication :- if no token admin not authenticated
  const token = req.cookies.adminToken;
  if (!token) {
    return next(new ErrorHandler("Admin not Authenticated!"));
  }
  //check if token is generated by our website or other
  let decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);

  // decoded.id  is user id we stored in userSchema while making jwtToken
  req.user = await User.findById(decoded.id);

  //Authorization :- is authorized for services
  if (req.user.role !== "Admin") {
    return next(
      new ErrorHandler(
        `${req.user.role} not authorizzed for this resources!`,
        403
      )
    );
  }

  next();
});

export const isPatientAuthenticated = catchAsyncErrors(
  async (req, res, next) => {
    const token = req.cookies.patientToken;
    if (!token) {
      return next(new ErrorHandler("Patient not Authenticated!"));
    }
    const decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
    req.user = await User.findById(decoded.id);

    if (req.user.role !== "Patient") {
      return next(
        new ErrorHandler(
          `${req.user.role} not authorized for this resources!`,
          403
        )
      );
    }
    next();
  }
);
